<?php
namespace BuddySystem\Profilematching\Controller;

/***
 *
 * This file is part of the "Profile_Matching" Extension for TYPO3 CMS.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 *  (c) 2018 Hrushikesh Sakunde <sakundehrushi@gmail.com>, buddysystem
 *
 ***/
use BuddySystem\Profilematching\Domain\Model\Userlink;
use BuddySystem\Profilematching\Domain\Repository\UserdetailsRepository;
use BuddySystem\Profilematching\Service\SessionService;
/**
 * UserlinkController
 */
class UserlinkController extends \TYPO3\CMS\Extbase\Mvc\Controller\ActionController
{
    /**
     * userlinkRepository
     *
     * @var \BuddySystem\Profilematching\Domain\Repository\UserlinkRepository
     * @inject
     */
    protected $userlinkRepository = null;



    /**
     * userdetailsRepository
     *
     * @var \BuddySystem\Profilematching\Domain\Repository\UserdetailsRepository
     * @inject
     */
    protected $userdetailsRepository = null;


    /**
     * @var SessionService
     */
    private $sessionService;


    private $userId;


    /**
     * @param SessionService $sessionService
     */
    public function injectSessionService(SessionService $sessionService)
    {
        $this->sessionService = $sessionService;
    }



    protected  function initializeAction()
    {
        parent::initializeAction(); // TODO: Change the autogenerated stub
        $this->userId = $this->sessionService->getFrontendUserId();

    }


    /**
     * action list
     *
     * @return void
     */
    public function listAction()
    {

        $userlinks = $this->userlinkRepository->findAll();
        $this->view->assign('userlinks', $userlinks);
    }



    /**
     * action profileLists
     *
     * @return void
     */
    public function listProfilesAction()
    {

        if(($this->userdetailsRepository->findByUserId($this->userId)->count()) !== 0) {
            $userLinks = $this->userlinkRepository->findByUser($this->userId);
            $userList = array();
            array_push($userList, $this->userId);
            foreach ($userLinks as $userlink) {
                array_push($userList, $userlink->getReceiverid());
                array_push($userList, $userlink->getSenderid());
            }
            $userdetails = $this->userdetailsRepository->findUserNotInList($userList);
            if($userdetails->count() !== 0) {
                $this->view->assign('userdetailss', $userdetails);
            }
            else{
                $this->addFlashMessage('No more Match found for your profile ');
                $this->view->assign('userdetailss', null);
            }
        }
        else
        {
            $this->addFlashMessage('To see the suggestions complete your profile');
            $this->view->assign('userdetailss', null);

        }


    }



    /**
     * action friendList
     *
     * @return void
     */
    public function friendListAction()

    {
        $userLinks= $this->userlinkRepository->findRquestsBySenderId($this->userId,'Accepted');
        $userList =array();
        foreach ($userLinks as $userlink)
        {
            array_push($userList,$userlink->getReceiverid());

        }


        $userLinks= $this->userlinkRepository->findRquestsByReceiverId($this->userId,'Accepted');
        foreach ($userLinks as $userlink)
        {
            array_push($userList,$userlink->getSenderid());

        }

        if( sizeof($userList) !== 0) {
            $userdetails = $this->userdetailsRepository->findUserInList($userList);
            $this->view->assign('userdetailss', $userdetails);
        }
        else
        {
            $this->addFlashMessage('Currently No Friends ');
            $this->view->assign('userdetailss', null);
        }

    }



    /**
     * action pendingRequests
     *
     * @return void
     */
    public function pendingRequestsAction()
    {
        $userLinks= $this->userlinkRepository->findRquestsByReceiverId($this->userId,'Requested');
        $userList =array();
        foreach ($userLinks as $userlink)
        {
            array_push($userList,$userlink->getSenderid());

        }
        if( sizeof($userList) !== 0) {
            $userdetails = $this->userdetailsRepository->findUserInList($userList);
            $this->view->assign('userdetailss', $userdetails);
        }
        else
        {
            $this->addFlashMessage('No Pending requests');
           $this->redirect('listProfiles');
        }

    }



    public function gotoHomeAction()
    {
        $uriBuilder = $this->uriBuilder;
        $uri = $uriBuilder
            ->setTargetPageUid(1)
            ->build();
        $this->redirectToUri($uri, 0, 404);

    }


    /**
     * action send
     *
     * @return void
     */
    public function sendAction(\BuddySystem\Profilematching\Domain\Model\Userdetails $userdetails)
    {
        $newUserlink = new Userlink();
        $newUserlink->setSenderid($this->userId);
        $newUserlink->setReceiverid($userdetails->getUserid());
        $newUserlink->setStatus('Requested');
        $this->addFlashMessage('The object was created.');
        $this->userlinkRepository->add($newUserlink);
        $this->redirect('listProfiles');

    }


    /**
     * action accept
     *
     * @return void
     */
    public function acceptAction(\BuddySystem\Profilematching\Domain\Model\Userdetails $userdetails)
    {
        $userlinks = $this->userlinkRepository->findRequest($userdetails->getUserid(),$this->userId);
        $userlinks[0]->setStatus('Accepted');
        $this->updateAction($userlinks[0]);
    }

    /**
     * action accept
     *
     * @return void
     */
    public function updateAction(\BuddySystem\Profilematching\Domain\Model\Userlink $userlink)
    {
        $this->addFlashMessage('The object was Updated.');
        $this->userlinkRepository->update($userlink);
        $this->redirect('friendList');

    }








    /**
     * action new
     *
     * @return void
     */
    public function newAction()
    {

    }

    /**
     * action create
     *
     * @param \BuddySystem\Profilematching\Domain\Model\Userlink $newUserlink
     * @return void
     */
    public function createAction(\BuddySystem\Profilematching\Domain\Model\Userlink $newUserlink)
    {
        $this->addFlashMessage('The object was created. Please be aware that this action is publicly accessible unless you implement an access check. See https://docs.typo3.org/typo3cms/extensions/extension_builder/User/Index.html', '', \TYPO3\CMS\Core\Messaging\AbstractMessage::WARNING);
        $this->userlinkRepository->add($newUserlink);
        $this->redirect('list');
    }
}
